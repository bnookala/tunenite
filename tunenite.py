import os
import rdio
import requests

from datetime import date, timedelta
from flask import Flask, redirect, url_for, request, session, abort
from urllib import urlencode

VENUE_SEARCH = 'http://api.songkick.com/api/3.0/search/venues.json?query={search_query}&apikey={api_key}'
VENUE_CALENDAR = 'http://api.songkick.com/api/3.0/venues/{venue_id}/calendar.json?apikey={api_key}'
SONGKICK_TO_RDIO = 'http://developer.echonest.com/api/v4/artist/profile?api_key={api_key}&id=songkick:artist:{artist_id}&format=json&bucket=id:rdio-US'

app = Flask(__name__)
app.secret_key = 'tunenite'

def string_to_date(date_string):
    return date(*[int(i) for i in date_string.split("-")])

def date_to_string(date_string):
    return date(*[int(i) for i in date_string.split("-")])

# TODO(nathan) cache these results locally
def songkick_to_rdio(artist_id):
    profile = requests.get(
        SONGKICK_TO_RDIO.format(
            artist_id=artist_id,
            api_key=os.environ['ECHONEST_API_KEY']
    )).json()

    profile = profile['response']

    if 'artist' not in profile:
        return ''

    artist = profile['artist']
    if 'foreign_ids' not in artist:
        return ''

    foreign_ids = artist['foreign_ids']
    for pair in foreign_ids:
        if pair['catalog'] == 'rdio-US':
            return pair['foreign_id'].split(':')[2]

    return ''

def venue_calendar(venue_id):
    calendar = calendar = requests.get(
        VENUE_CALENDAR.format(
            venue_id=venue_id,
            api_key=os.environ['SONGKICK_API_KEY']
    )).json()

    return calendar['resultsPage']['results']

def artists_from_calendar(calendar, start, end):
    events = calendar['event']
    for event in events:
        event_date = string_to_date(event['start']['date'])

        if event_date < start or event_date > end:
            continue

        performances = event['performance']
        for performance in performances:
            yield performance['artist']['id']

def venue_name_from_calendar(calendar):
    events = calendar['event']
    if events:
        return events[0]['venue']['displayName']
    else:
        return ''

@app.route('/venue_playlist/<int:venue_id>')
def venue_to_playlist(venue_id):
    start = date.today()
    end = start + timedelta(7)

    auth_token = session['auth_token']

    rdio_manager = rdio.Api(
        os.environ['RDIO_API_KEY'],
        os.environ['RDIO_SHARED_SECRET'],
        auth_token['oauth_token'],
        auth_token['oauth_token_secret'])

    calendar = venue_calendar(venue_id)
    venue_name = venue_name_from_calendar(calendar)

    track_keys = []
    for songkick_artist in artists_from_calendar(calendar, start, end):
        rdio_artist = songkick_to_rdio(songkick_artist)

        if not rdio_artist:
            continue

        tracks = rdio_manager.get_tracks_for_artist(rdio_artist)
        track_keys += [track.key for track in tracks]

    venue_playlist = rdio_manager.create_playlist(
        '{venue} from {start} to {end}'.format(
            venue=venue_name,
            start=start.strftime('%B %d, %Y'),
            end=start.strftime('%B %d, %Y')),
        'Automatically generated by tunenite',
        track_keys)

    return venue_playlist.short_url

@app.route('/venue_search')
def venue_search():
    pass

@app.route('/authorized')
def authorized():
    session['oauth_verifier'] = request.args['oauth_verifier']

    rdio_manager = rdio.Api(
        os.environ['RDIO_API_KEY'],
        os.environ['RDIO_SHARED_SECRET'])

    session['auth_token'] = \
        rdio_manager.authorize_with_verifier(
            session['oauth_verifier'],
            session['request_token'])

    # TODO(nathan) redirect to venue search
    current_user = rdio_manager.current_user()
    return current_user.name

@app.route('/login')
def login():
    rdio_manager = rdio.Api(
        os.environ['RDIO_API_KEY'],
        os.environ['RDIO_SHARED_SECRET'])

    token_dict = rdio_manager.get_token_and_login_url()

    session['request_token'] = {
        'oauth_token': token_dict['oauth_token'],
        'oauth_token_secret': token_dict['oauth_token_secret']
    }

    return redirect(token_dict['login_url'] + '?' +
        urlencode({
            'oauth_token': token_dict['oauth_token'],
            'oauth_callback': url_for('authorized', _external=True)}))

@app.route('/')
def index():
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)

